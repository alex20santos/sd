package rmi;import java.text.ParseException;import java.util.ArrayList;import java.util.Scanner;import java.net.MalformedURLException;import java.rmi.*;import java.util.Calendar;import java.text.DateFormat;import java.text.SimpleDateFormat;public class AdminConsole {    static  String naming = "//127.0.0.1:7000/server";    static Scanner sc = new Scanner(System.in);    public static  void main(String args[]) throws MalformedURLException, RemoteException, NotBoundException, ParseException {        int option = -1;        ServerInterface ci=null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        while (option != 0) {            try{                option = consoleMenu();                if(option == 1){                    registerPerson();                }                else if(option == 2){                    editPerson();                }                else if (option == 3){                    departmentManagement();                }                else if(option == 4){                    createElection();                }                else if(option == 5){                    manageCandidates();                }                else if(option == 6){                    editElection();                }                else if(option == 7){                    //addVotingTable();                }                else if(option ==8){                    //removeVotingTable();                }                else if(option == 9){                    antecipatedVote();                }                else if(option==10){                    electionsInfo();                }                else if(option==11){                    getVotingPlaceOfVoter();                }                else if(option==12){                    showVotingTables();                }                else if(option==13){                    votingTableMembersManagement();                }                else if(option==14) {                    showPastElectionsInfo();                }            }catch (Exception e){                System.out.println("Erro!");            }        }    }    private static void showPastElectionsInfo() throws RemoteException {        ServerInterface ci = null;        Election e=null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception ex) {            System.out.println("Exception in main: " + e);        }        ArrayList<Election>previousElections= null;        if (ci != null) {            previousElections = ci.getPreviousElections();        }        if(previousElections!=null){            e =chooseElection(previousElections);        }        if (e != null) {            printElectionInfo(e);        }    }    private static void printElectionInfo(Election e) {        ServerInterface ci = null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception ex) {            System.out.println("Exception in main: " + ex);        }        System.out.println(" -- Informacoes da eleicao escolhida --");        System.out.println("Tipo de eleicao: "+e.getClass().getName());        System.out.println("Nome: "+e.getName());        System.out.println("Descricao: "+e.getDescription());        System.out.println("Data: "+e.getDate().getDay()+"/"+e.getDate().getMonth()+"/"+e.getDate().getYear());        System.out.println("Hora inicio: "+e.getDate().getStarting_hour());        System.out.println("Hora fim: "+e.getDate().getEnding_hour());        try {            System.out.println("Numero total de votos: "+ci.getNumberOfVotes(e));        } catch (RemoteException e1) {            e1.printStackTrace();        }        ArrayList<Candidate> candidates = null;        try {            candidates = ci.getCandidates(e);        } catch (RemoteException e1) {            e1.printStackTrace();        }        System.out.println("Candidatos:");        for( Candidate c:candidates){            System.out.println(" nome:"+c.getName());            try {                System.out.println(" numero de votos: "+ci.getNumberOfVotesOfCandidate(c));            } catch (RemoteException e1) {                e1.printStackTrace();            }        }    }    private static void votingTableMembersManagement() throws RemoteException {        ServerInterface ci = null;        String n_string;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        System.out.print("Nome do departamento:");        String dep = sc.nextLine();        Department department = ci.searchDepartmentByName(dep);        VotingTable v = new VotingTable(department,department.id);        if(v.department!=null){            int op = subMenuMembers();            switch(op){                case 1:                    System.out.print("Numero de CC:");                    String id = sc.nextLine();                    ci.addMemberToVotingTable(id,v);                    break;                case 2:                    System.out.print("Numero de CC do membro para remover:");                    id =sc.nextLine();                    ci.removeMemberFromVotingTable(id,v);                    break;                case 3:                    System.out.print("Numero de CC do novo delegado para substituir o existente:");                    id= sc.nextLine();                    ci.changeVotingTableDelegate(id,v);                    break;            }        }    }    private static int subMenuMembers() {        int option;        System.out.println(" -- Gerir membros de mesa --");        System.out.println("1 - Adicionar ");        System.out.println("2 - Remover ");        System.out.println("3 - Mudar o delegado");        System.out.print("Opcao:");        option = sc.nextInt();        sc.nextLine();        return option;    }    private static VotingTable chooseVotingTable(ArrayList<VotingTable> voting_tables) {        if(!voting_tables.isEmpty()){            int counter = 1;            System.out.println("Selecione a mesa de voto: ");            for(VotingTable v:voting_tables){                System.out.println(counter + "  - " + v);                counter++;            }            int opt;            opt = sc.nextInt();            sc.nextLine();            VotingTable v = voting_tables.get(opt-1);            return v;        }        else{            System.out.println("Nao existem mesas de voto");            return null;        }    }    private static void showVotingTables() throws RemoteException {        ServerInterface ci = null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        assert ci != null;        ArrayList<VotingTable>voting_tables= ci.getVotingTables();        //System.out.println(voting_tables);        System.out.println("Mesas de voto on/off");        for(VotingTable v : voting_tables){            if(v.isUp()){                System.out.println(" -- Mesa de voto on --");                System.out.println("Delegado: "+v.getDelegate().getId_number());                System.out.println("Membros restantes:"+v.getMembers()); // TODO query para ter os membros de uma eleição                System.out.println("Departamento:"+v.getDepartment());            }            else if(!v.isUp()){                System.out.println(" -- Mesa de voto off --");                System.out.println("Delegado: "+v.getDelegate().getId_number());                System.out.println("Membros restantes:"+v.getMembers());                System.out.println("Departamento:"+v.getDepartment().getName());                System.out.println();            }        }    }    private static Election chooseElection(ArrayList<Election> elections) {        if(!elections.isEmpty()){            int counter = 1;            System.out.println("Selecione a eleição: ");            for(Election e:elections){                System.out.println(counter + "  - " + e);                counter++;            }            int opt;            opt = sc.nextInt();            sc.nextLine();            Election e = elections.get(opt-1);            return e;        }        else{            System.out.println("Nao existem eleicoes");            return null;        }    }    private static void getVotingPlaceOfVoter() throws RemoteException {        ServerInterface ci = null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        System.out.print("Numero de cc:");        String userID = sc.nextLine();        ArrayList<Vote> userVotes = ci.getPreviousVotes(userID);        for(Vote v : userVotes){            System.out.println("eleicao:"+v.getElection().getName());            System.out.println("sitio de voto:"+v.getPlace_of_vote().getName());            System.out.println();        }    }    private static void electionsInfo() throws RemoteException, ParseException {        ServerInterface ci = null;        String n_string;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        ArrayList<Election> elections = ci.getElectionsNow();        if(!elections.isEmpty()){            Election chosenElection = chooseElection(elections);            printElectionInfo(chosenElection);        }        else{            System.out.println("Nao existem eleicoes a ocorrer neste momento");        }    }    private static void antecipatedVote() throws RemoteException, ParseException {        ServerInterface ci = null;        String n_string;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        System.out.print("Numero de cc:");        String user_id = sc.nextLine();        Person p = null;        p = ci.searchUser(user_id);        System.out.print("Password:");        String pw = sc.nextLine();        if (ci.checkPassword(user_id, pw)) {            System.out.println("User logged in");            if(p!=null) {                ArrayList<Election> elections;                elections = ci.getElectionsByUser(p.getTag(),p.getDepartment());                if(!elections.isEmpty()){                    int counter = 1;                    System.out.println("Selecione a eleição: ");                    for (Election e : elections) {                        System.out.println(counter + "  - " + e);                        counter++;                    }                    int opt;                    opt = sc.nextInt();                    sc.nextLine();                    Election e = elections.get(opt - 1);                    ArrayList<Candidate> candidates = ci.getCandidates(e);                    int i = 1;                    System.out.println("Lista de candidados para votar:");                    for (Candidate c : candidates) {                        System.out.println(i + " - " + c.getName());                        i++;                    }                    int optVote = sc.nextInt();                    sc.nextLine();                    Candidate c = candidates.get(optVote - 1);                    Vote v = new Vote(p.getDepartment(), c, e);                    ci.registerVote(e, v, p);                }                else{                    System.out.println("Nao existem eleicoes disponiveis");                }            }            else{                System.out.println("User not logged in");            }        }    }    private static boolean checkVoterInElection(ArrayList<Person> electionVoters,Person p) {        boolean result=false;        for(Person person:electionVoters){            if(person.getId_number().equals(p.getId_number()) && person.getTag().equals(p.getTag())                    && person.getDepartment().getName().equals(p.getDepartment().getName())){                result=true;                break;            }        }        return result;    }    public static Department getDepartment() throws RemoteException {        ServerInterface ci = null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        System.out.print("Departamento:");        String depName =sc.nextLine();        Department department;        if (ci != null) {            department = ci.searchDepartmentByName(depName);            return department;        }        else {            System.out.println("Nao existe este departamento");            return  null;        }    }    /*     return            0 -> datas iguais            1 -> d1 é depois de d2            -1 -> d1 é antes de d2     */    public static int compareDates(Date d1,Date d2) throws ParseException {        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd h:m");        String d1String = ""+d1.getYear()+"-"+d1.getMonth()+"-"+d1.getDay()+" "+d1.getEnding_hour().getHour()+":"+d1.getEnding_hour().getMinute()+"";        String d2String = ""+d2.getYear()+"-"+d2.getMonth()+"-"+d2.getDay()+" "+d2.getEnding_hour().getHour()+":"+d2.getEnding_hour().getMinute()+"";        java.util.Date dateObject = sdf.parse(d1String);        java.util.Date dateObject2 = sdf.parse(d2String);        return dateObject.compareTo(dateObject2);    }    private static void addVotingTable() throws RemoteException {        ServerInterface ci = null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        System.out.println("Adicionar mesa de voto ao sistema");        Department department= getDepartment();        System.out.print("ID do delegado de mesa: ");        String delegateID = sc.nextLine();        Person delegate = ci.searchUser(delegateID);        if(delegate!=null){            System.out.println("Utilizador encontrado!");        }        else{            System.out.println("Utilizador nao encontrado");            return;        }    }    public static Date inputDate(){        int d,m,y,h,min;        Date nd;        Hour nh;        while(true){            System.out.println("Insira o Dia: ");            d = sc.nextInt();            sc.nextLine();            System.out.println("Mes: ");            m = sc.nextInt();            sc.nextLine();            System.out.println("Ano: ");            y = sc.nextInt();            sc.nextLine();            System.out.println("Hora: ");            h = sc.nextInt();            sc.nextLine();            System.out.println("Minuto: ");            min = sc.nextInt();            sc.nextLine();            if(verificaData(y,m,d)){                break;            }            else{                System.out.println("Por favor introduza novamente");            }        }        nh = new Hour(h,min);        nd = new Date(d,m,y,nh,nh);        return nd;    }    public static String setUserFunction(){        int op;        String tag="";        System.out.println(" Tipo de registo");        System.out.println("1 - Estudante");        System.out.println("2 - Professor");        System.out.println("3 - Trabalhador");        System.out.print("Opcao: ");        op = sc.nextInt();        sc.nextLine();        if(op==1){            tag = "student";        }        else if(op==2){            tag = "teacher";        }        else if(op==3) {            tag = "worker";        }        else{            System.out.println("Erro!");        }        return tag;    }    public static int registerPerson() throws RemoteException {        int op, user_id=1, day ,month,year;        String name,password,depart,tag="",address,contact,id_number,dataString;        ServerInterface ci=null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        tag= setUserFunction();        System.out.print("Password:");        password = sc.nextLine();        System.out.print("Departamento:");        depart = sc.nextLine();        Department d=null;        if (ci != null) {            d = ci.searchDepartmentByName(depart);        }        if(d==null){            System.out.println("Departamento nao existe");            return  0;        }        System.out.print("Morada:");        address = sc.nextLine();        while(true){            System.out.print("Numero de identificacao cartao de cidadao :");            id_number = sc.nextLine();            if(ci.verifyUserID(id_number)){ // se ainda nao existir este id                break;            }            else{                System.out.println("Este id ja esta registado");            }        }        System.out.print("Contacto:");        contact = sc.nextLine();        System.out.print("Data de expiracao do cartao de identificacao (dd/mm/aaaa):");        dataString = sc.nextLine();        String str[] = dataString.split("/");        day = Integer.parseInt(str[0]);        month  = Integer.parseInt(str[1]);        year = Integer.parseInt(str[2]);        Hour h = new Hour(24,59);        Date expirationDate = new Date(day,  month,  year,  null,  h);        ci.addUser(d,user_id,password,contact,address,id_number,expirationDate,tag);        return 1;    }    public static boolean editPerson() throws RemoteException {        Person p;        String id_number;        int option;        ServerInterface ci=null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        System.out.print("Numero de identificacao cartao de cidadao :");        id_number = sc.next();        p = ci.searchUser(id_number);        if(p == null){            System.out.println("Essa pessoa não existe");            return false;        }        System.out.println("O que deseja editar: \n");        System.out.println("1 - Validade do Cartão de Cidadão ");        System.out.println("2 - Morada");        System.out.println("3 - Contacto telefonico");        System.out.println("4 - Departamento");        System.out.println("5 - Função");        System.out.println("6 - Password");        option = sc.nextInt();        sc.nextLine();        switch (option) {            case 1:                Date date;                System.out.println("Insira nova data de validade: ");                date = inputDate();                ci.editUserExpirationDate(id_number,date);                break;            case 2:                System.out.println("Insira nova morada: ");                String n_m;                n_m = sc.nextLine();                ci.editUserAddress(id_number,n_m);                break;            case 3:                System.out.println("Insira novo contacto");                String n_num;                n_num = sc.nextLine();                ci.editUserContact(id_number,n_num);                break;            case 4:                System.out.println("Insira novo departamento");                String n_dep;                Department dep;                n_dep = sc.nextLine();                dep = ci.searchDepartmentByName(n_dep);                System.out.println(dep);                if(dep!=null)                    ci.editUserDepartment(id_number,dep);                break;            case 5:                System.out.println("Insira nova funcao");                String n_func;                n_func = setUserFunction();                if(n_func !=null)                    ci.editUserFunction(id_number,n_func);                break;            case 6:                System.out.println("Insira a nova password");                String n_password;                n_password  = sc.nextLine();                ci.editPassword(p.getId_number(),n_password);        }        return true;    }    public static boolean verificaHora(int hora,int min){        if((hora>=0 && hora <24) && (min>=0 && min<=59)){            return true;        }        else{            return false;        }    }    public static Date createElectionDate(){        String dataString,hourString;        int day,month,year;        while(true){            System.out.print("Data da eleicao (dd/mm/aaaa):");            dataString = sc.next();            String str[] = dataString.split("/");            day = Integer.parseInt(str[0]);            month  = Integer.parseInt(str[1]);            year = Integer.parseInt(str[2]);            if (verificaData(year, month, day)) {                break;            }            else{                System.out.println("Data inválida! Tente novamente");            }        }        Hour hourInit;        Hour hourEnd;        while(true){            System.out.print("Hora de inicio (hh:mm):");            hourString = sc.next();            String str[]  = hourString.split(":");            int h_init = Integer.parseInt(str[0]);            int m_init  = Integer.parseInt(str[1]);            hourInit = new Hour(h_init,m_init);            if(verificaHora(h_init,m_init)){                break;            }            else{                System.out.println("Hora invalida! Tente novamente");            }        }        while(true) {            System.out.print("Hora de fim (hh:mm):");            hourString = sc.next();            String[] str = hourString.split(":");            int h_end = Integer.parseInt(str[0]);            int m_end = Integer.parseInt(str[1]);            hourEnd = new Hour(h_end, m_end);            if (verificaHora(h_end, m_end)) {                break;            } else {                System.out.println("Hora invalida! Tente novamente");            }        }        return new Date(day,month,year,hourInit,hourEnd);    }    public static void createElection() throws RemoteException, NotBoundException, MalformedURLException {        int option;        ArrayList<Candidate> students = new ArrayList<>();        String name, description;        Date d;        ServerInterface ci=null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        d = createElectionDate();        System.out.println("Tipo de eleicao:");        System.out.println("1 - Conselho geral");        System.out.println("2 - Nucleo de estudantes");        System.out.println("3 - Departamento");        System.out.print("Option:");        option = sc.nextInt();        sc.nextLine();        System.out.println("Nome Eleiçao: ");        name = sc.nextLine();        System.out.println("Descriçao: ");        description = sc.nextLine();        if(option == 1){            if (ci != null)                ci.createElectionConselhoGeral(name,description,d);        }        else if(option == 2 ){            Department department =getDepartment();            if (ci != null) {                ci.createElectionNucleo(name,description,d,department);            }        }        else if(option ==3){            System.out.print("Departamento:");            String depName =sc.next();            Department department = null;            if (ci != null) {                department = ci.searchDepartmentByName(depName);            }            if(department!=null) {                ci.createElectionDepartment(name, description, d, department);            }            else                System.out.println("Nao existe este departamento");        }    }    public static void editElection() throws RemoteException, ParseException {        ServerInterface ci = null;        String n_string;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        ArrayList<Election> elections = null;        if (ci != null) {            elections = ci.getElections();        }        int counter = 1;        System.out.println("Selecione a eleição que quer editar: ");        for(Election e:elections){            System.out.println(counter + "  - " + e);            counter++;        }        int opt;        opt = sc.nextInt();        sc.nextLine();        Election e = elections.get(opt-1);        System.out.println("O que deseja editar: ");        System.out.println("1 - Data: ");        System.out.println("2 - Nome");        System.out.println("3 - Descriçao");        opt = sc.nextInt();        sc.nextLine();        if(ci!=null){            switch (opt){                case 1:                    Date d = createElectionDate();                    ci.editElectionDate(e,d);                    break;                case 2:                    n_string = sc.nextLine();                    ci.editElectionName(e,n_string);                    break;                case 3:                    n_string = sc.nextLine();                    ci.editElectionDescription(e,n_string);                    break;            }        }    }    public static void manageCandidates() throws RemoteException{        ServerInterface ci = null;        String n_string;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        ArrayList<Election> elections = null;        if (ci != null) {            elections = ci.getElections();        }        int counter = 1;        System.out.println("Selecione a eleição que quer editar: ");        if (elections!=null && !elections.isEmpty()) {            for(Election e:elections){                System.out.println(counter + "  - " + e);                counter++;            }            int opt;            opt = sc.nextInt();            sc.nextLine();            Election e = elections.get(opt-1);            System.out.println("Escolha o tipo de lista:");            String listType= chooseListType(e);            opt = subMenuCandidates();            listsMenu(e,opt,listType);        }    }    private static void listsMenu(Election election ,int opt, String listType) throws RemoteException {        ServerInterface ci=null;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        switch (opt){            case 1:                String name = null;                System.out.println("Nome da lista: ");                name = sc.nextLine();                ArrayList<Person> candidates;                candidates = getCandidateList(listType);                Candidate n_cand = new Candidate(election,name,candidates,0);                if (ci != null) {                    ci.addCandidateToElection(election,n_cand);                }                break;            case 2:                System.out.println("Escolha a lista: ");                int i=1;                System.out.println(ci.getCandidates(election));                for(Candidate candidate:ci.getCandidates(election)) {                    System.out.println(i+" - "+candidate.getName());                    i++;                }                int op = Integer.parseInt(sc.nextLine());                Candidate c = ci.getCandidates(election).get(op-1);                if (ci != null) {                    ci.removeListFromElection(election,c.getName());                }                break;        }    }    private static String chooseListType(Election e) {        int listTypeChoice;        if(e.getClass().getName().equals("ElectionConselhoGeral")){            System.out.println("1 - Estudantes");            System.out.println("2 - Professores");            System.out.println("3 - Trabalhadores");            listTypeChoice = Integer.parseInt(sc.nextLine());            if(listTypeChoice==1){                return "students";            }            else if(listTypeChoice==2){                return "teachers";            }            else if (listTypeChoice==3){                return "workers";            }        }        else if(e.getClass().getName().equals("ElectionNucleo")) {            System.out.println("1 - Estudantes");            listTypeChoice = Integer.parseInt(sc.nextLine());            if(listTypeChoice==1){                return "students";            }        }        else if(e.getClass().getName().equals("ElectionDepartment")) {            System.out.println("1 - Professores");            listTypeChoice = Integer.parseInt(sc.nextLine());            if(listTypeChoice==1){                return "teachers";            }        }        return null;    }    public static ArrayList<Person> getCandidateList(String listType) throws RemoteException{        ServerInterface ci = null;        String id_number = "Empty" ;        try {            ci = (ServerInterface) Naming.lookup(naming);        } catch (Exception e) {            System.out.println("Exception in main: " + e);        }        ArrayList<Person> people = new ArrayList<>();        Person dude = null;        while(!id_number.equals("0")){            System.out.println("Indique o numero de cartao de cidadao da pessoa que deseja adicionar \nou 0 se nao desejar adicionar mais ninguem:");            id_number = sc.nextLine();            if (ci != null) {                dude = ci.searchUser(id_number);            }            if(dude != null){                if(listType.equals("teachers") && dude.getTag().equals("teacher")){                    people.add(dude);                }                else if(listType.equals("students") && dude.getTag().equals("student")){                    people.add(dude);                }                else if(listType.equals("workers") && dude.getTag().equals("worker")){                    people.add(dude);                }                else{                    System.out.println("Esta pessoa nao pode fazer parte desta lista");                }            }        }        return people;    }    public static int subMenuCandidates(){        int option;        System.out.println(" -- Gerir listas --");        System.out.println("1 - Criar nova ");        System.out.println("2 - Eliminar");        System.out.print("Opcao:");        option = sc.nextInt();        sc.nextLine();        return option;    }    public static int subMenuDepartments(){        int option;        System.out.println(" -- Gerir departamentos --");        System.out.println("1 - Criar novo ");        System.out.println("2 - Editar ");        System.out.println("3 - Eliminar");        System.out.print("Opcao:");        option = sc.nextInt();        sc.nextLine();        return option;    }    public static void departmentManagement() throws RemoteException, NotBoundException, MalformedURLException {        int option = subMenuDepartments();        Department d;        String name;        ServerInterface ci = (ServerInterface) Naming.lookup(naming);        if(option == 1){            System.out.print("Nome do departamento:");            name = sc.next();            if(ci.verifyDepartment(name)){                ci.createDepartment(name);            }            else{                System.out.println("Este departamento já existe");            }        }        else if(option==2){            System.out.print("Nome do departamento:");            name = sc.next();            d = ci.searchDepartmentByName(name);            if(d!=null){                System.out.print("Novo nome:");                String newName = sc.next();                if(ci.verifyDepartment(newName)){                    ci.editDepartmentName(d,newName);                }                else{                    System.out.println("Ja existe um departamento com este nome");                }            }            else{                System.out.println("Departamento nao existe");            }        }        else if(option == 3){            System.out.print("Nome do departamento:");            name = sc.next();            Department depart;            depart = ci.searchDepartmentByName(name);            if(depart!=null)                ci.deleteDepartment(depart);        }    }    private static boolean verificaData(int ano, int mes, int dia) {        if (ano < Calendar.getInstance().get(Calendar.YEAR)) {            return false;        }        else if(mes>12 || mes<1){            return false;        }        else if (ano == Calendar.getInstance().get(Calendar.YEAR) && mes == Calendar.getInstance().get(Calendar.MONTH)+1 && dia < Calendar.getInstance().get(Calendar.DAY_OF_MONTH)) {            return false;        }        else if (ano == Calendar.getInstance().get(Calendar.YEAR) && mes < Calendar.getInstance().get(Calendar.MONTH)) {            return false;        }        else if (ano >= Calendar.getInstance().get(Calendar.YEAR)) {            return true;        }        if(verificaDia(dia,mes))            return true;        else            return false;    }    private static  boolean verificaDia(int dia, int mes) {        if (dia >= 1 && dia <= 31) {            if (dia <= 30 && (mes == 2 || mes == 4 || mes == 6 || mes == 9 || mes == 11)) {                return true;            } else if (mes == 1 || mes == 3 || mes == 5 || mes == 7 || mes == 8 || mes == 10 || mes == 12) {                return true;            }        }        return false;    }    public static  int consoleMenu(){        int option;        System.out.println(" -- Console Menu -- \n");        System.out.println("1 - Registar pessoa");        System.out.println("2 - Editar pessoa");        System.out.println("3 - Gerir departamentos");        System.out.println("4 - Criar eleição");        System.out.println("5 - Gerir listas de candidatos a uma eleição");        System.out.println("6 - Editar eleição");        System.out.println("7 - Adicionar mesas de voto");        System.out.println("8 - Remover mesas de voto");        System.out.println("9 - Voto antecipado");        System.out.println("10 - Mostrar eleições a acontecer neste momento");        System.out.println("11 - Ver em que local votou um eleitor");        System.out.println("12 - Mostrar mesas de voto on/off");        System.out.println("13 - Gerir membros para uma mesa de voto");        System.out.println("14 - Consultar resultados de eleicoes passadas");        System.out.println("0 - Sair");        System.out.print("Opcao: ");        option = sc.nextInt();        sc.nextLine();        return option;    }}